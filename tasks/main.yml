---

- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster

- name: 'Determine cluster type'
  command: oc version
  register: oc_version
  ignore_errors: yes

- name: 'Set facts'
  set_fact:
    cluster: "{{ 'openshift' if 'openshift' in oc_version.stdout else 'kubernetes' }}"

- name: 'Include variables based on ansible version'
  include_vars: ansible_26.yml
  when: ansible_version.full is version('2.6', '>=')

- when: apb_action == 'update'
  block:
    - when: mysql_version == "5.6" and app_version == "5.7"
      name: Prepare for downgrade
      shell: |
         oc exec -it -n {{ namespace }} {{ app_pod_name }} -- /bin/bash -c "mysql -u root -e \"
         ALTER TABLE mysql.procs_priv MODIFY Grantor char(77) COLLATE utf8_bin NOT NULL DEFAULT '';
         ALTER TABLE mysql.columns_priv MODIFY User char(16) NOT NULL default '';
         ALTER TABLE mysql.user MODIFY User char(16) NOT NULL default '';
         ALTER TABLE mysql.db MODIFY User char(16) NOT NULL default '';
         ALTER TABLE mysql.procs_priv MODIFY User char(16) binary DEFAULT '' NOT NULL;
         ALTER TABLE mysql.user ADD Password char(41) character set latin1 collate latin1_bin NOT NULL default '' AFTER user;
         UPDATE mysql.user SET password = authentication_string WHERE LENGTH(authentication_string) = 41 AND plugin = 'mysql_native_password';
         UPDATE mysql.user SET authentication_string = '' WHERE LENGTH(authentication_string) = 41 AND plugin = 'mysql_native_password';
         ALTER TABLE mysql.help_category ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.help_keyword ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.help_relation ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.help_topic ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.time_zone ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.time_zone_leap_second ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.time_zone_name ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.time_zone_transition  ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.time_zone_transition_type ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.plugin ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.servers ENGINE='MyISAM' STATS_PERSISTENT=DEFAULT;
         ALTER TABLE mysql.user MODIFY plugin CHAR(64) COLLATE utf8_bin DEFAULT 'mysql_native_password';
         DROP DATABASE sys;\""

    - name: Backup database
      shell: kubectl exec -it -n {{ namespace }} {{ app_pod_name }} -- /bin/bash -c "mkdir -p /tmp/db && mysqldump -u root --all-databases > /tmp/db/dump"

    - name: Rsync to APB
      shell: oc rsync -n {{ namespace }} {{ app_pod_name }}:/tmp/db /tmp

    - name: Take down old deployment and pvc (if it exists)
      openshift_raw:
        state: absent
        definition: "{{ lookup('template', item) | from_yaml }}"
      loop:
        - pvc.yaml
        - deployment.yaml

    - name: "Update last operation"
      asb_last_operation:
        description: "25%: Backup complete"
      when: in_cluster

- name: "Set mysql objects state={{ state }}"
  openshift_raw:
    state: "{{ item.state }}"
    definition: "{{ lookup('template', item.name) | from_yaml }}"
  loop:
    - name: service.yaml
      state: "{{ state }}"
    - name: pvc.yaml
      state: "{{ state if _apb_plan_id == 'prod' else 'absent' }}"
    - name: deployment.yaml
      state: "{{ state }}"

- name: "Update last operation"
  asb_last_operation:
    description: "50%: Objects updated state={{ state }}"
  when: in_cluster

- when: apb_action == 'update'
  block:
    - name: "Wait for deployment to become available"
      debug:
        msg: "Deployment available status: {{ deployment_query }}"
      retries: 12
      delay: 10
      until:
        - deployment_query

    - name: rsync db backup to new pod
      shell: oc rsync -n {{ namespace }} /tmp/db {{ app_pod_name }}:/tmp

    - name: Restore database
      shell: oc exec -it -n {{ namespace }} {{ app_pod_name }} -- /bin/bash -c "mysql -u root < /tmp/db/dump"

    - name: Run mysql_upgrade
      shell: oc exec -it -n {{ namespace }} {{ app_pod_name }} -- /bin/bash -c "mysql_upgrade -u root --force"

    - name: "Update last operation"
      asb_last_operation:
        description: "75%: Restore complete"
      when: in_cluster

- name: encode bind credentials
  asb_encode_binding:
    fields:
      DB_TYPE: "mysql"
      DB_HOST: "{{ app_name }}"
      DB_PORT: "{{ mysql_port }}"
      DB_USER: "{{ mysql_user }}"
      DB_PASSWORD: "{{ mysql_password }}"
      DB_NAME: "{{ mysql_database }}"
  when: in_cluster and state == "present"

- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
